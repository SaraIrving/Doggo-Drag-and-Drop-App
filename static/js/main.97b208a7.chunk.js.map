{"version":3,"sources":["components/Button.jsx","components/ListItem.jsx","components/List.jsx","App.js","serviceWorker.js","index.js"],"names":["Button","props","console","log","onClick","text","dogNames","require","ListItem","maleRandom","key","randomName","name","draggableId","index","provided","className","draggableProps","dragHandleProps","ref","innerRef","src","pic","alt","listItemType","event","dogArray","Array","from","dogs","fixedDogPics","i","length","splice","updateDogs","prev","deleteDog","List","droppableId","droppableProps","map","id","placeholder","dogPics","App","useState","refreshDogs","axios","get","then","response","data","message","catch","err","onButtonClick","onDragEnd","result","destination","source","items","reorderedItem","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.97b208a7.chunk.js","sourcesContent":["import React from 'react';\n\n\n\nexport default function Button (props) {\n  console.log('props in button = ', props)\n\n  return (\n  <button onClick={props.onClick}>{props.text}</button>\n\n  )\n  \n\n} ","import React from 'react';\nimport Button from './Button';\nimport { Draggable } from \"react-beautiful-dnd\";\nconst dogNames = require('dog-names');\n\n\nexport default function ListItem (props) {\n  console.log('props in List Item = ', props)\n\n  let name = dogNames.maleRandom();\n\n  //moved in from APP component \n  function deleteDog(provided) {\n    //have the name of the dog we clicked on\n    //use that to find the desired object in the fixed dogs array and delete it??\n\n    const dogArray = Array.from(props.dogs.fixedDogPics)\n    for (let i = 0; i < dogArray.length; i++) {\n      if (dogArray[i].name === provided.dragHandleProps[\"data-rbd-drag-handle-draggable-id\"]) {\n        dogArray.splice(i, 1)\n      }\n    }\n\n    props.updateDogs(prev => {return {...prev, fixedDogPics: dogArray}})\n  }\n\n  return (\n\n    <Draggable key={props.randomName + props.name} draggableId={props.draggableId} index={props.index}>\n      {(provided) => (\n        <ol className=\"dogWrapper\"{...provided.draggableProps} {...provided.dragHandleProps} ref={provided.innerRef}>\n          <div>\n            <img src={props.pic} alt=\"invisible doggo\" className=\"dogPic\"/>\n          </div>\n          <p>\n            This Good Boi's name is: <br></br><span>{props.randomName}</span>\n          </p>\n          {props.listItemType === \"keepers\" && <Button onClick={event => deleteDog(provided)} text=\"Send him to the farm!\"></Button>}\n        </ol>\n      )} \n    </Draggable>\n\n  )\n}","import React from 'react';\nimport { Droppable } from \"react-beautiful-dnd\";\nimport ListItem from './ListItem';\n\nexport default function List (props) {\n  console.log('props in LIST = ', props)\n\n  return (\n    <div>\n      {props.droppableId === \"keepers\" && <Droppable droppableId={props.droppableId}>\n        {(provided) => (\n         <ul className=\"dogListWrapper\" {...provided.droppableProps} ref={provided.innerRef}>\n            {props.dogs.fixedDogPics.map(({id, pic, name, randomName}, index) => {\n\n            return (\n\n              <ListItem listItemType={props.listItemType} key={randomName + name} draggableId={name} index={index} randomName={randomName} pic={pic} id={id} dogs={props.dogs} updateDogs={props.updateDogs}></ListItem>\n            \n            );\n            })}\n            {provided.placeholder}\n        </ul>\n        )}\n      </Droppable>}\n      {props.droppableId === \"doggos\" && <Droppable droppableId={props.droppableId}>\n        {(provided) => (\n         <ul className=\"dogListWrapper\" {...provided.droppableProps} ref={provided.innerRef}>\n            {props.dogs.dogPics.map(({id, pic, name, randomName}, index) => {\n\n            return (\n\n              <ListItem listItemType={props.listItemType} key={randomName + name} draggableId={name} index={index} randomName={randomName} pic={pic} id={id} dogs={props.dogs} updateDogs={props.updateDogs}></ListItem>\n            \n            );\n            })}\n            {provided.placeholder}\n        </ul>\n        )}\n      </Droppable>}\n    </div>\n  )\n}\n","import React from 'react';\nimport {useState} from 'react';\nimport axios from 'axios';\nimport './App.css';\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\nimport Button from './components/Button';\nimport ListItem from './components/ListItem';\nimport List from './components/List';\nconst dogNames = require('dog-names');\n\n\nfunction App() {\n\n  // HARD CODED DATA FOR KEEPERS ARRAY IF NEEDED\n  // const fixedDogPics = [{pic: 'https://images.dog.ceo/breeds/terrier-irish/n02093991_1282.jpg', id: 1, name: \"bob\", randomName: \"bobo\"}, {pic: 'https://images.dog.ceo/breeds/kuvasz/n02104029_2656.jpg', id: 2, name: \"frank\", randomName: \"fofo\"}, {pic: 'https://images.dog.ceo/breeds/havanese/00100trPORTRAIT_00100_BURST20191112123933390_COVER.jpg', id: 3, name: \"joe\", randomName: \"jojo\"}];\n\n  // HARD CODED DATA OF ONE DOG IF NEEDED\n  // const starterDogPic = [{pic: 'https://images.dog.ceo/breeds/terrier-irish/n02093991_1282.jpg', id: 0, name: 'https://images.dog.ceo/breeds/terrier-irish/n02093991_1282.jpg', randomName: \"bob\"}]\n\n  const [dogs, updateDogs] = useState({refreshDogs: 0, dogPics: [], fixedDogPics: []});\n\n\n  const apiDogPics =[];\n \n  function onButtonClick () {\n    updateDogs(prev => {return {...prev, dogPics: []}})\n    for (let i = 0; i < 3; i++) {\n      axios.get('https://dog.ceo/api/breeds/image/random')\n      .then(response => {\n        let randomName = dogNames.maleRandom();\n        updateDogs(prev => {return {...prev, dogPics: [...prev.dogPics, {pic:response.data.message, id: i + 1, name: response.data.message, randomName: randomName}]}})  \n      })\n      .catch(err => console.log(err));\n    }  \n  } \n\n\n  function handleOnDragEnd(result) {\n    if(!result.destination) {\n      return;\n    }\n\n    if (result.destination.droppableId === \"doggos\" && result.source.droppableId === \"doggos\") {\n      const items = Array.from(dogs.dogPics);\n      const [reorderedItem] = items.splice(result.source.index, 1);\n      items.splice(result.destination.index, 0, reorderedItem);\n      updateDogs(prev => {return {...prev, dogPics: items}})\n\n    } else if (result.destination.droppableId === \"keepers\" && result.source.droppableId === \"keepers\") {\n      const items = Array.from(dogs.fixedDogPics);\n      const [reorderedItem] = items.splice(result.source.index, 1);\n      console.log(\"IN KEEPERS = \", reorderedItem)\n      items.splice(result.destination.index, 0, reorderedItem);\n  \n      updateDogs(prev => {return {...prev, fixedDogPics: items}})\n\n    } else if (result.destination.droppableId !== result.source.droppableId) {\n      console.log(\"you're switching LISTS!!\")\n      if (result.destination.droppableId === \"keepers\") {\n        const items = Array.from(dogs.fixedDogPics);\n        const [reorderedItem] = dogs.dogPics.splice(result.source.index, 1);\n        items.splice(result.destination.index, 0, reorderedItem)\n\n        updateDogs(prev => {return {...prev, fixedDogPics: items}})\n      }\n    }\n  }\n\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>\n          Most Handsome Doggo\n        </h1>\n      </header>\n      <div className=\"listContainer\">\n        <h2>Drag and drop these puppers! <br></br>Put them in order of most handsome, decide which are \"keepers\" and which to \"send to the farm!\"</h2>\n        <Button onClick={event => onButtonClick()} text=\"Show me dogs!\"></Button>\n          <DragDropContext onDragEnd={handleOnDragEnd}>\n            <div className=\"dragDropContextWrapper\">\n              <div className=\"newDoggoWrapper\">\n                <h2 className=\"listTitle\">New Doggos</h2>\n                <List dogs={dogs} updateDogs={updateDogs} droppableId=\"doggos\" listItemType=\"doggos\"></List>\n              </div>\n              <div className=\"keepersWrapper\">\n                <h2 className=\"listTitle\">Keepers</h2>\n                <List dogs={dogs} updateDogs={updateDogs} droppableId=\"keepers\" listItemType=\"keepers\"></List>\n              </div>\n            </div>\n          </DragDropContext>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}